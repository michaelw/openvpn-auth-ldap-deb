/*
 * TRConfigParser.lemon
 * Configuration Parser
 *
 * Author: Landon Fuller <landonf@threerings.net>
 *
 * Copyright (c) 2006 Three Rings Design, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the copyright holders nor the names of any contributors
 *    may be used to endorse or promote products derived from this
 *    software without specific prior written permission.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

%include {
#ifdef HAVE_CONFIG_H
#include <config.h>
#endif

#include "TRConfig.h"

#include <stdio.h>
}

%name TRConfigParse
%token_type {TRConfigToken *}
%token_prefix {TOKEN_}
%extra_argument {id <TRConfigDelegate> configDelegate}
%token_destructor {[$$ release];}

%syntax_error {
	[configDelegate parseError: TOKEN];
}

config_file ::= lines.
lines ::= .
lines ::= lines declaration.
lines ::= lines section.

declaration ::= KEY(key) VALUE(keyValue). {
	    [configDelegate setKey: key value: keyValue];
	    [key release];
	    [keyValue release];
}

section ::= declare_section lines SECTION_END(end). {
	[configDelegate endSection: end];
	[end release];
}
declare_section ::= SECTION_START(type) SECTION_NAME(name). {
		[configDelegate startSection: type sectionName: name];
		[type release];
		[name release];
}
declare_section ::= SECTION_START(type). {
		[configDelegate startSection: type sectionName: nil];
		[type release];
}
